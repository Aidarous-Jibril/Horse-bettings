{"version":3,"sources":["ExpandRow.js","Table.js","UpcomingGames.js","Results.js","components/Navbar.js","App.js","index.js"],"names":["getStyle","fontFamily","fontWeight","color","StartRow","start","horse","trainer","useState","expanded","setExpanded","Fragment","onClick","number","name","driver","firstName","lastName","style","pedigree","father","Table","props","className","date","starts","map","ExpandRow","key","UpcomingGames","gameType","races","race","id","Results","Navbar","class","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","aria-current","href","placeholder","InputContainer","onChange","AVAILABLE_GAME_TYPES","btnStyle","width","backgroundColor","padding","display","marginLeft","marginTop","borderRadius","border","App","render","setGameType","upcomingRace","setUpcomingRace","racesResult","setRacesResult","isLoading","setIsLoading","selected","setSelected","sortAndFetchData","data","upcoming","result","length","sort","a","b","Date","startTime","fetchLatestGameAndResult","results","url","fetch","then","res","json","console","log","catch","error","handleClck","event","value","target","toUpperCase","includes","fetchUrl","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.69c8341d.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./Table.css\";\r\n\r\nfunction StartRow({ start, horse }) {\r\n  //console.log(start) console.log(horse)\r\n\r\n  //destructing horse.trainer props\r\n  const trainer = horse.trainer;\r\n  const [expanded, setExpanded] = useState(false);\r\n\r\n  //toggle to expand by using true or false of expanded boolean\r\n  const toggleExpand = () => {\r\n    expanded ? setExpanded(false) : setExpanded(true);\r\n  };\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <tr onClick={toggleExpand} >\r\n        <td>#{start.number}</td>\r\n        <td>{start.horse.name}</td>\r\n        <td>{start.driver.firstName} {start.driver.lastName}  </td>\r\n      </tr>\r\n      {expanded && (\r\n        <tr >\r\n          <td>            \r\n            <span style={getStyle}>Trainer firstname:</span><br></br> {trainer.firstName} \r\n          </td>\r\n          <td>            \r\n            <span style={getStyle}>Trainer lastname:</span><br></br> {trainer.lastName}\r\n          </td>\r\n          <td>            \r\n            <span style={getStyle}>Horse father name:</span><br></br> {horse.pedigree.father.name}    \r\n          </td>\r\n        </tr>\r\n      )}\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\n//style\r\nconst getStyle = {\r\n  fontFamily: \"Arial\",\r\n  fontWeight: \"bolder\",\r\n  color: \"#8B0000\"\r\n};\r\nexport default StartRow;\r\n","import React from \"react\";\r\nimport \"./Table.css\";\r\nimport ExpandRow from \"./ExpandRow\";\r\n\r\nfunction Table(props) { \r\n  //console.log(props)\r\n  return (\r\n    <table className=\"Table\">\r\n     <thead>\r\n        <tr>\r\n          <th>#{props.number}</th>\r\n          <th>{props.name ? props.name : \"Name not available\"}</th>\r\n          <th>{props.date}</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <tr className=\"thead-dark\">\r\n          <td>\r\n            <b>Start Number</b>\r\n          </td>\r\n          <td>\r\n            <b>Horse</b>\r\n          </td>\r\n          <td>\r\n            <b>Driver</b>\r\n          </td>\r\n        </tr>\r\n\r\n        {props.starts.map(start => (\r\n          <ExpandRow key={start.number} start={start} horse={start.horse} />\r\n        ))}\r\n      </tbody>\r\n    </table>\r\n  );\r\n}\r\n\r\nexport default Table;\r\n\r\n","import React from \"react\";\r\nimport Table from \"./Table\";\r\n\r\nfunction UpcomingGames(props) {\r\n //({race}) can be destructured like so if needed, loop through props(races) from App.js and pass race.start to expand into child comp to expand\r\n  //console.log(props);\r\n\r\n  return (\r\n    <div>\r\n      <h4 className=\"text text-center text-info m-3\">Showing closest upcoming game for {props.gameType}</h4>\r\n      {props.races.map(race => (\r\n        <Table\r\n          key={race.id}\r\n          name={race.name}\r\n          date={race.date}\r\n          number={race.number}\r\n          starts={race.starts}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default UpcomingGames;\r\n","import React from \"react\";\r\nimport Table from \"./Table\";\r\nfunction Results(props) {\r\n    //console.log(props);\r\n\r\n  return (\r\n    <div>\r\n      <h4 className=\"text text-center text-info m-3\">Showing closest results game for {props.gameType}</h4>\r\n      {props.races.map(race => (\r\n        <Table\r\n          key={race.id}\r\n          name={race.name}\r\n          date={race.date}\r\n          number={race.number}\r\n          starts={race.starts}\r\n        />\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Results;\r\n","import React from 'react'\r\n\r\nconst Navbar = () => {\r\n    return (\r\n<nav class=\"navbar navbar-expand-lg navbar navbar-dark bg-dark\">\r\n  <div class=\"container-fluid\">\r\n    <a class=\"navbar-brand mr-5\" >Betting78</a>\r\n    <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarText\" aria-controls=\"navbarText\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span class=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div class=\"collapse navbar-collapse \" id=\"navbarText\">\r\n      <ul class=\"navbar-nav me-auto mb-2 mb-lg-0 justify-content-end\">\r\n        <li class=\"nav-item\">\r\n          <a class=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n        </li>\r\n        <li class=\"nav-item\">\r\n          <a class=\"nav-link\" href=\"#\">Sport</a>\r\n        </li>\r\n        <li class=\"nav-item\">\r\n          <a class=\"nav-link\" href=\"#\">Casino</a>\r\n        </li>\r\n      </ul>\r\n      <form class=\"d-flex\">\r\n        <input class=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n        <button class=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n      </form>\r\n    </div>\r\n  </div>\r\n  \r\n</nav>\r\n\r\n\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","import React, { useState } from \"react\";\r\nimport \"./App.css\";\r\nimport UpcomingGames from \"./UpcomingGames\";\r\nimport Result from \"./Results\";\r\nimport Navbar from \"./components/Navbar\";\r\n\r\n//Input functional component\r\nfunction InputContainer({ onChange }) {\r\n  return (\r\n    <section className=\"container-fluid bg-success pt-5\">\r\n      <div className=\"form-group container\">\r\n        <h2 className=\"display-4 text-center\">\r\n          Enter one of following Game type:\r\n        </h2>\r\n        <h5 className=\"text text-danger text-center\">(V75, V65, V64 or V4)</h5>\r\n        <input\r\n          onChange={onChange}\r\n          placeholder=\"Type of game...\"\r\n          className=\"form-control form-control-lg\"\r\n        />\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n\r\n//declare var for allowed game types\r\nconst AVAILABLE_GAME_TYPES = [\"V75\", \"V65\", \"V64\", \"V4\"];\r\n\r\nfunction App() {\r\n  const [gameType, setGameType] = useState(\"\");\r\n  const [upcomingRace, setUpcomingRace] = useState(null);\r\n  const [racesResult, setRacesResult] = useState(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [selected, setSelected] = useState(\"upcoming\");\r\n\r\n  //handle change\r\n  const handleChange = event => {\r\n    const value = event.target.value.toUpperCase();\r\n    if (AVAILABLE_GAME_TYPES.includes(value)) {\r\n      setIsLoading(true);\r\n      setGameType(value);\r\n      //fetching url endpoint with user input\r\n      const fetchUrl = `https://www.atg.se/services/racinginfo/v1/api/products/${value}`;\r\n      return fetch(fetchUrl)\r\n        .then(res => res.json())\r\n        .then(data => {      console.log(data);\r\n          return sortAndFetchData(data);\r\n        })\r\n        .catch(error => {\r\n          console.log(\"Error\", error);\r\n        });\r\n    }\r\n  };\r\n\r\n  //sorting fetched data and pick whatever is at the index 0 because that is the closest, earliest or newest bcz upc has more than 1 game init\r\n  const sortAndFetchData = data => {\r\n    let upcoming;\r\n    let result;\r\n    //check if there is any upcoming games\r\n    if (data.upcoming && data.upcoming.length > 0) {\r\n      upcoming = data.upcoming.sort(\r\n        (a, b) => new Date(b.startTime) - new Date(a.startTime)\r\n      )[0];\r\n      fetchLatestGameAndResult(upcoming.id, \"upcoming\");\r\n      // console.log(upcoming)\r\n    } else {\r\n      setIsLoading(false);\r\n      setUpcomingRace({ races: null });\r\n    }\r\n    // games may not have results, so check game results\r\n    if (data.results && data.results.length > 0) {\r\n      result = data.results.sort(\r\n        (a, b) => new Date(b.startTime) - new Date(a.startTime)\r\n      )[0];\r\n      fetchLatestGameAndResult(result.id, \"result\");\r\n    } else {\r\n      setIsLoading(false);\r\n      setRacesResult({ races: null });\r\n    }\r\n  };\r\n\r\n  //fetch API endpoint with the id of chosen game from schedule table\r\n  const fetchLatestGameAndResult = (id, type) => {\r\n    const url = `https://www.atg.se/services/racinginfo/v1/api/games/${id}`;\r\n    fetch(url)\r\n      .then(res => res.json())\r\n      .then(data => {\r\n        console.log(data)\r\n        if (type === \"upcoming\") {\r\n          setIsLoading(false);\r\n          setUpcomingRace(data) \r\n          //console.log(data); //this data is attached to races data\r\n        } else if (type === \"result\") {\r\n          setIsLoading(false);\r\n          setRacesResult(data);\r\n        }\r\n      })\r\n      .catch(error => {\r\n        console.log(error);\r\n      });\r\n  };\r\n\r\n  //handleClick accepts an argument to store setSelected()\r\n  const handleClck = selected => {\r\n    setSelected(selected);\r\n  };\r\n\r\n  let render;\r\n  if (upcomingRace || racesResult) {\r\n    //storing the selected value render variable and passing data to child components\r\n    render =\r\n      selected === \"upcoming\" ? (\r\n        <UpcomingGames races={upcomingRace.races} gameType={gameType} />\r\n      ) : (\r\n        <Result races={racesResult.races} gameType={gameType} />\r\n      );\r\n  }\r\n  return (\r\n    <main>\r\n     <Navbar />\r\n      <InputContainer onChange={handleChange} />\r\n      <nav>\r\n        <button style={btnStyle} onClick={() => handleClck(\"upcoming\")}>Upcoming</button>\r\n        <button style={btnStyle} onClick={() => handleClck(\"result\")}>Result</button>         \r\n      </nav>\r\n      {isLoading && <p className=\"loading\">Loading...</p> }\r\n      {render ? (\r\n        <div className={isLoading ? \"low-opacity\" : \"\"}>{render}</div>\r\n      ) : (\r\n        <h4 className=\"text-center pt-3\">\r\n          Please enter a valid game type \r\n        </h4>\r\n      )}\r\n    </main>\r\n  );\r\n}\r\n\r\n//buttons style\r\nconst btnStyle = {\r\n  width: \"20%\",\r\n  backgroundColor: \"#555555\",\r\n  color: \"white\",\r\n  padding: \"12px 22px\",\r\n  display: \"inline\",\r\n  marginLeft: \"20%\",\r\n  marginTop: \"5px\",\r\n  borderRadius: \"5%\",\r\n  border: \"2px solid #ffffff\"\r\n};\r\n\r\nexport default App;\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n\r\n\r\n"],"sourceRoot":""}